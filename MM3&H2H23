###The following portion contains code to evaluate RT of M/M/3 queues (enveloped between portions to read the lambda and mu values from our specific data files (.csv files))

import pandas as pd
import numpy as np
import math

inp_fn = "allfitw92-SH-iodepth16-clsize4-L2"
df_iat = pd.read_csv(inp_fn+"_IAT.csv")
df_iat1 = df_iat
df_st = pd.read_csv(inp_fn+"_ST.csv")
f_out = open(inp_fn+".csv","w")

df_exp_iat = df_iat[df_iat.DistName == "exponential"]
df_exp_st = df_st[df_st.DistName == "exponential"]

#Exponential (M/M/3) code here
subtrace = 0
r_line = ""
while True:
    df_exp_subtrace_iat = df_exp_iat[df_exp_iat.fname.str.contains("_"+str(subtrace))]
    df_exp_subtrace_st = df_exp_st[df_exp_st.fname.str.contains("_"+str(subtrace))]
    
    if not df_exp_subtrace_st.shape[0]:
        break
    
    lam = 1/df_exp_subtrace_iat.Params_1.values[0]
    mu = 1/df_exp_subtrace_st.Params_1.values[0]
    
    k = 3
    rho = lam/(k*mu)

    if rho > 1 :
        rt = "Unstable"
        #print("Unstable queue")
    else :
        p0 = 0
        for i in range(k) :
            p0 += ((lam/mu)**i)/math.factorial(i)
        p0 += (pow(k,k)/math.factorial(k)) * pow(rho, k)/ (1 - rho)
        p0 = 1 / p0

        #print("p0 is : {}" .format(p0))

        p1 = p0 * ((lam/mu)**1)/math.factorial(1) 
        #print("p1 is : {}" .format(p1))

        p2 = p0 * ((lam/mu)**2)/math.factorial(2) 
        #print("p2 is : {}" .format(p2))

        #Compute expected long term length L 
        pi_w = 1 - p0 - p1 - p2
        L = (lam/mu) + (rho*pi_w)/ (1 - rho)

        #print("Long term expected length : ", L)

        #Compute long term expected response time
        W = L/lam
        #print("Long term expected response time : ", W)
        rt = W
        
    r_line += str(rt)+", "
    
    subtrace = subtrace +1
print("Exponential M/M/3")
print(r_line)


###Here ends the M/M/3 code

###The following portion contains code to evaluate RT of H2/H2/3 queues (enveloped between portions to read the lambda and mu values from our specific data files (.csv files))

subtrace = 0
r_line = ""
while True:
    df_hyperexp_subtrace_iat = df_hyperexp_iat[df_hyperexp_iat.fname.str.contains("_"+str(subtrace))]
    df_hyperexp_subtrace_st = df_hyperexp_st[df_hyperexp_st.fname.str.contains("_"+str(subtrace))]

    if not df_hyperexp_subtrace_st.shape[0]:
        break
    
    #Declaring parameters
    lam1 = 1/df_hyperexp_subtrace_iat.Params_1.values[0]
    lam2 = 1/df_hyperexp_subtrace_iat.Params_2.values[0]

    mu1 = 1/df_hyperexp_subtrace_st.Params_1.values[0]
    mu2 = 1/df_hyperexp_subtrace_st.Params_2.values[0]
    
    p =  df_hyperexp_subtrace_iat.Params_3.values[0]
    q =  df_hyperexp_subtrace_st.Params_3.values[0]
    
    b1 = 3*mu1*(1-q)
    b2 = 3*mu2*(1-q)
    b3 = 3*mu1*q
    b4 = 3*mu2*q
    f1 = lam1*(1-p)
    f2 = lam2*(1-p)
    f3 = lam1*p
    f4 = lam2*p
    
    #Initializing forward, backward and initial arrays
    L_0 = np.transpose(np.array([[-(lam1), 0],
                   [0, -(lam2)]]))
   # print(L_0)
    #F_0 = np.array([[lam1*p*q, lam1*(1-p)*q, lam1*p*(1-q), lam1*(1-p)*(1-q)],
    #               [lam2*(1-p)*(1-q), lam2*p*(1-q), lam2*p*q, lam2*(1-p)*q]])

    F_0 = np.array([[lam1*p*q, lam1*(1-p)*q, lam1*p*(1-q), lam1*(1-p)*(1-q)],
                  #[lam2*p*q, lam2*(p)*(1-q), lam2*(1-p)*(q), lam2*(1-p)*(1-q)],
                   [lam2*(p)*(q), lam2*(1-p)*(q), lam2*(p)*(1-q), lam2*(1-p)*(1-q)]])
   # print(F_0)
    B_0 = np.array([[mu1, 0],
                   [mu1, 0],
                   [0, mu2],
                   [0, mu2]])
   # print(B_0)
    L = np.array([[-(lam1 + 3*mu1), 0, 0, 0],
                 [0, -(lam2 + 3*mu1), 0, 0],
                 [0, 0, -(lam1 + 3*mu2), 0],
                 [0, 0, 0, -(lam2 + 3*mu2)]])
    L_1 = np.array([[-(lam1 + mu1), 0, 0, 0],
                 [0, -(lam2 + mu1), 0, 0],
                 [0, 0, -(lam1 + mu2), 0],
                 [0, 0, 0, -(lam2 + mu2)]])
    L_2 = np.array([[-(lam1 + 2*mu1), 0, 0, 0],
                 [0, -(lam2 + 2*mu1), 0, 0],
                 [0, 0, -(lam1 + 2*mu2), 0],
                 [0, 0, 0, -(lam2 + 2*mu2)]])
   # print(L)
   # print(L_1)
   # print(L_2)
    F = np.array([[f3, f1, 0, 0],
                 [f4, f2, 0, 0],
                 [0, 0, f3, f1],
                 [0, 0, f4, f2]])
   # print(F)
    B = np.array([[b3, 0, b1, 0],
                 [0, b3, 0, b1],
                 [b4, 0, b2, 0],
                 [0, b4, 0, b2]])
    B_1 = np.array([[2*mu1*q, 0, 2* mu1*(1-q), 0],
                 [0, 2*mu1*q, 0, 2*mu1*(1-q)],
                 [2*mu2*q, 0, 2*mu2*(1-q), 0],
                 [0, 2*mu2*q, 0, 2*mu2*(1-q)]])
   # print(B)
   # print(B_1)
    R_0 = np.zeros((4, 4))
   # print(R_0)

    # Computing matrix R
    R_prev = R_0
    n = 0
    flag = 0

    while flag == 0 :
        diff = []
        if n > 0:
            R_prev = R

        R_2 = np.matmul(R_prev,R_prev)
        R_mid = -(np.matmul(R_2,B) + F)
        #print(R_mid)
        R = np.matmul(R_mid, np.linalg.inv(L))

        for (i,j) in zip(R_prev, R) :
            for (k,l) in zip(i,j) :
                diff.append(abs(k-l))

        max = np.max(diff)
        #print("Max is", max)
        if (max < 10**-7) :

            flag =1
            break
        n += 1
    #print(R,n)
    
    #Computing steady state distribution for state 0 and 1 and 2

    #Creating (I - R)^-1 = psi
    I = np.eye(4)
    psi_full = np.linalg.inv(I - R)
    psi = np.matmul(psi_full, np.ones((4,1), dtype=np.int64))
    psi = np.vstack([np.ones((10,1), dtype=np.int64), psi])
  #  print("Psi :",psi)

    #Creating L + RB
    RB = np.matmul(R, B)
    LRB = np.add(L, RB)
   # print(LRB)

    #Creating stacked version of [0 0 F  L+RB]T = phi
    phi_3 = np.vstack([np.zeros((2, 4)), np.zeros((4, 4)), F, LRB])

    #Creating stacked version of [0  F L2 B]T = phi
    phi_2 = np.vstack([np.zeros((2, 4)), F, L_2, B])

    #Creating stacked version of [F_0 L_1 B_1 0]
    phi_1 = np.vstack([F_0, L_1, B_1, np.zeros((4, 4))])

    phi = np.hstack([phi_1, phi_2, phi_3])
  #  print("Phi :",phi)

    #Solving for pi_0 and pi_1 and pi_2
    A = np.array([0, -(lam2), 0, 0, mu2, mu2, 0, 0, 0, 0, 0, 0, 0, 0])
    A = A[..., None] 

    A = np.hstack([psi,A, phi])
    b = np.array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  #  print(A,b)
    """
    steady_pi = np.linalg.solve(np.transpose(A), b)
    print(steady_pi)
    """
    steady_pi = np.matmul(b, np.linalg.inv(A)) 
   # print(steady_pi)
   # print(b.shape)
    
    lam_avg = (p/(lam1) + (1-p)/(lam2))
    
    pi_1 = [steady_pi[2], steady_pi[3], steady_pi[4], steady_pi[5]]
   # print("pi_1 : ", pi_1)

    pi_2 = [steady_pi[6], steady_pi[7], steady_pi[8], steady_pi[9]]
   # print("pi_2 : ", pi_2)

    pi_3 = [steady_pi[10], steady_pi[11], steady_pi[12], steady_pi[13]]
   # print("pi_3 : ", pi_3)

    squareI_R = np.matmul((I - R), (I - R)) 
    W_num_1 = np.matmul(np.linalg.inv(squareI_R), np.ones((4,1), dtype=int))
    W_num_1 = np.matmul(R, W_num_1)
    #print(W_num_1)

    W_num_2 = 3*np.matmul(np.linalg.inv(I - R), np.ones((4,1), dtype=int))
    #print(W_num_2)
    W_num = np.dot(pi_3, W_num_1 + W_num_2)

    W_num = W_num + np.matmul(pi_1, np.ones((4,1), dtype=int)) + 2*np.matmul(pi_2, np.ones((4,1), dtype=int)) 
    W = W_num * lam_avg
    #print("The mean response time is: ", W)
    
    subtrace+=1
    
    r_line += str(W[0])+", "
    
print("H2/H2/3 mean RT :")
print(r_line)

###Here ends the H2/H2/3 code

###Remember you can execute M/H2/3 through simple changes in the input of the H2/H2/1 code (i.e., lam1 = lam2)

###The following portion contains code to evaluate RT of M/H2/3 queues (enveloped between portions to read the lambda and mu values from our specific data files (.csv files))

subtrace = 0
r_line = ""
while True:
    
    #df_hyperexp_subtrace_iat = df_hyperexp_iat[df_hyperexp_iat.fname.str.contains("_"+str(subtrace))]
    df_exp_subtrace_iat = df_exp_iat[df_exp_iat.fname.str.contains("_"+str(subtrace))]
    df_hyperexp_subtrace_st = df_hyperexp_st[df_hyperexp_st.fname.str.contains("_"+str(subtrace))]

    if not df_hyperexp_subtrace_st.shape[0]:
        break
    #print(df_exp_subtrace_iat.Params_1.values)
    
    #Declaring parameters
    lam1 = 1/df_exp_subtrace_iat.Params_1.values[0]
    lam2 = 1/df_exp_subtrace_iat.Params_1.values[0]

    mu1 = 1/df_hyperexp_subtrace_st.Params_1.values[0]
    mu2 = 1/df_hyperexp_subtrace_st.Params_2.values[0]
    
    #p =  df_hyperexp_subtrace_iat.Params_3.values[0]
    q =  df_hyperexp_subtrace_st.Params_3.values[0]
    
    b1 = 3*mu1*(1-q)
    b2 = 3*mu2*(1-q)
    b3 = 3*mu1*q
    b4 = 3*mu2*q
    f1 = lam1*(1-p)
    f2 = lam2*(1-p)
    f3 = lam1*p
    f4 = lam2*p
    
    #Initializing forward, backward and initial arrays
    L_0 = np.transpose(np.array([[-(lam1), 0],
                   [0, -(lam2)]]))
   # print(L_0)
    #F_0 = np.array([[lam1*p*q, lam1*(1-p)*q, lam1*p*(1-q), lam1*(1-p)*(1-q)],
    #               [lam2*(1-p)*(1-q), lam2*p*(1-q), lam2*p*q, lam2*(1-p)*q]])

    F_0 = np.array([[lam1*p*q, lam1*(1-p)*q, lam1*p*(1-q), lam1*(1-p)*(1-q)],
                  #[lam2*p*q, lam2*(p)*(1-q), lam2*(1-p)*(q), lam2*(1-p)*(1-q)],
                   [lam2*(p)*(q), lam2*(1-p)*(q), lam2*(p)*(1-q), lam2*(1-p)*(1-q)]])
   # print(F_0)
    B_0 = np.array([[mu1, 0],
                   [mu1, 0],
                   [0, mu2],
                   [0, mu2]])
   # print(B_0)
    L = np.array([[-(lam1 + 3*mu1), 0, 0, 0],
                 [0, -(lam2 + 3*mu1), 0, 0],
                 [0, 0, -(lam1 + 3*mu2), 0],
                 [0, 0, 0, -(lam2 + 3*mu2)]])
    L_1 = np.array([[-(lam1 + mu1), 0, 0, 0],
                 [0, -(lam2 + mu1), 0, 0],
                 [0, 0, -(lam1 + mu2), 0],
                 [0, 0, 0, -(lam2 + mu2)]])
    L_2 = np.array([[-(lam1 + 2*mu1), 0, 0, 0],
                 [0, -(lam2 + 2*mu1), 0, 0],
                 [0, 0, -(lam1 + 2*mu2), 0],
                 [0, 0, 0, -(lam2 + 2*mu2)]])
   # print(L)
   # print(L_1)
   # print(L_2)
    F = np.array([[f3, f1, 0, 0],
                 [f4, f2, 0, 0],
                 [0, 0, f3, f1],
                 [0, 0, f4, f2]])
   # print(F)
    B = np.array([[b3, 0, b1, 0],
                 [0, b3, 0, b1],
                 [b4, 0, b2, 0],
                 [0, b4, 0, b2]])
    B_1 = np.array([[2*mu1*q, 0, 2* mu1*(1-q), 0],
                 [0, 2*mu1*q, 0, 2*mu1*(1-q)],
                 [2*mu2*q, 0, 2*mu2*(1-q), 0],
                 [0, 2*mu2*q, 0, 2*mu2*(1-q)]])
   # print(B)
   # print(B_1)
    R_0 = np.zeros((4, 4))
   # print(R_0)

    # Computing matrix R
    R_prev = R_0
    n = 0
    flag = 0

    while flag == 0 :
        diff = []
        if n > 0:
            R_prev = R

        R_2 = np.matmul(R_prev,R_prev)
        R_mid = -(np.matmul(R_2,B) + F)
        #print(R_mid)
        R = np.matmul(R_mid, np.linalg.inv(L))

        for (i,j) in zip(R_prev, R) :
            for (k,l) in zip(i,j) :
                diff.append(abs(k-l))

        max = np.max(diff)
        #print("Max is", max)
        if (max < 10**-7) :

            flag =1
            break
        n += 1
    #print(R,n)
    
    #Computing steady state distribution for state 0 and 1 and 2

    #Creating (I - R)^-1 = psi
    I = np.eye(4)
    psi_full = np.linalg.inv(I - R)
    psi = np.matmul(psi_full, np.ones((4,1), dtype=np.int64))
    psi = np.vstack([np.ones((10,1), dtype=np.int64), psi])
  #  print("Psi :",psi)

    #Creating L + RB
    RB = np.matmul(R, B)
    LRB = np.add(L, RB)
   # print(LRB)

    #Creating stacked version of [0 0 F  L+RB]T = phi
    phi_3 = np.vstack([np.zeros((2, 4)), np.zeros((4, 4)), F, LRB])

    #Creating stacked version of [0  F L2 B]T = phi
    phi_2 = np.vstack([np.zeros((2, 4)), F, L_2, B])

    #Creating stacked version of [F_0 L_1 B_1 0]
    phi_1 = np.vstack([F_0, L_1, B_1, np.zeros((4, 4))])

    phi = np.hstack([phi_1, phi_2, phi_3])
  #  print("Phi :",phi)

    #Solving for pi_0 and pi_1 and pi_2
    A = np.array([0, -(lam2), 0, 0, mu2, mu2, 0, 0, 0, 0, 0, 0, 0, 0])
    A = A[..., None] 

    A = np.hstack([psi,A, phi])
    b = np.array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  #  print(A,b)
    """
    steady_pi = np.linalg.solve(np.transpose(A), b)
    print(steady_pi)
    """
    steady_pi = np.matmul(b, np.linalg.inv(A)) 
   # print(steady_pi)
   # print(b.shape)
    
    lam_avg = (p/(lam1) + (1-p)/(lam2))
    
    pi_1 = [steady_pi[2], steady_pi[3], steady_pi[4], steady_pi[5]]
   # print("pi_1 : ", pi_1)

    pi_2 = [steady_pi[6], steady_pi[7], steady_pi[8], steady_pi[9]]
   # print("pi_2 : ", pi_2)

    pi_3 = [steady_pi[10], steady_pi[11], steady_pi[12], steady_pi[13]]
   # print("pi_3 : ", pi_3)

    squareI_R = np.matmul((I - R), (I - R)) 
    W_num_1 = np.matmul(np.linalg.inv(squareI_R), np.ones((4,1), dtype=int))
    W_num_1 = np.matmul(R, W_num_1)
    #print(W_num_1)

    W_num_2 = 3*np.matmul(np.linalg.inv(I - R), np.ones((4,1), dtype=int))
    #print(W_num_2)
    W_num = np.dot(pi_3, W_num_1 + W_num_2)

    W_num = W_num + np.matmul(pi_1, np.ones((4,1), dtype=int)) + 2*np.matmul(pi_2, np.ones((4,1), dtype=int)) 
    W = W_num * lam_avg
    #print("The mean response time is: ", W)
    
    subtrace+=1
    
    r_line += str(W[0])+", "
    
print("M/H2/3 mean RT :")
print(r_line)
